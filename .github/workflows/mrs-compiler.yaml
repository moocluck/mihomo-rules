name: Generate MRS files for Mihomo

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate_mrs:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'
    steps:
      - name: 🔍 Checkout repo
        uses: actions/checkout@v4
        
      - name: 📥 Pull Changes
        run: git pull

      - name: 💽 Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y curl wget git jq
         
      - name: 🔍 Get Latest Mihomo Version
        id: get_version
        shell: bash
        run: |
          set -euo pipefail
          LATEST_RELEASE="$(curl -fsSL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/MetaCubeX/mihomo/releases/latest)"

          VERSION="$(jq -r '.tag_name' <<<"$LATEST_RELEASE")"

          # Предпочитаем v3 → v2 → v1 → fallback на любой .deb (строго один URL)
          URL="$(
            jq -r '
              # Сначала пытаемся v3, затем v2, затем v1
              ((.assets[] | select(.name | test("^mihomo-linux-amd64-v3-.*\\.deb$")) | .browser_download_url),
              (.assets[] | select(.name | test("^mihomo-linux-amd64-v2-.*\\.deb$")) | .browser_download_url),
              (.assets[] | select(.name | test("^mihomo-linux-amd64-v1-.*\\.deb$")) | .browser_download_url),
              # Если ни один из v1/v2/v3 не найден — берём любой amd64 .deb
              (.assets[] | select(.name | test("^mihomo-linux-amd64-.*\\.deb$")) | .browser_download_url))
              | select(.!=null)
            ' <<<"$LATEST_RELEASE" | head -n1
          )"

          if [[ -z "${URL:-}" ]]; then
            echo "No suitable amd64 .deb asset found in latest release" >&2
            exit 1
          fi

          printf 'MIHOMO_VERSION=%s\n' "$VERSION" >> "$GITHUB_ENV"
          printf 'MIHOMO_DOWNLOAD_URL=%s\n' "$URL" >> "$GITHUB_ENV"

      - name: 📥 Download and install Mihomo
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -L "${{ env.MIHOMO_DOWNLOAD_URL }}" -o mihomo-linux-amd64.deb
          sudo dpkg -i ./mihomo-linux-amd64.deb || sudo apt-get -y -f install
        
      - name: ⚙️ Generate MRS files
        run: |
          mkdir -p rule-sets
          # Обработка domain-list
          for file in domain-list/*.yaml; do
            [ -f "$file" ] || continue
            base=$(basename "$file" .yaml)
            mihomo convert-ruleset domain yaml "$file" "rule-sets/$base.mrs"
          done
          # Обработка ip-list
          for file in ip-list/*.yaml; do
            [ -f "$file" ] || continue
            base=$(basename "$file" .yaml)
            mihomo convert-ruleset ipcidr yaml "$file" "rule-sets/$base.mrs"
          done

      - name: 🗑️ Delete temp file
        run: |
          rm mihomo-linux-amd64.deb
          
      - name: 📅 Get current date
        id: date
        run: |
          echo "DATE=$(TZ=Europe/Moscow date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
      
      - name: 📤 Commit and Push Changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "Generating .mrs rule-sets ${{ env.DATE }}" -a || echo "No changes to commit"
          git push